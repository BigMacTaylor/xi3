#!/bin/bash

# Set name of panel
PANEL_NAME="lxpanel"

# Set gap for status tray icons
PANEL_GAP=140

# Get window-id of panel
PANEL_ID=$(xdotool search -class "$PANEL_NAME" | tail -n 1)

# Get the region to track (x, y, width, height)
PANEL_X=$(xwininfo -id "$PANEL_ID" | grep "Absolute upper-left X:" | tr -d -c 0-9)
PANEL_Y=$(xwininfo -id "$PANEL_ID" | grep "Absolute upper-left Y:" | tr -d -c 0-9)
PANEL_WIDTH=$(xwininfo -id "$PANEL_ID" | grep "Width:" | tr -d -c 0-9)
PANEL_HEIGHT=$(xwininfo -id "$PANEL_ID" | grep "Height:" | tr -d -c 0-9)
PANEL_WIDTH=$((PANEL_WIDTH-PANEL_GAP))

# Function to check if mouse coordinates are within the specified region
is_within_region() {
  local x=$1
  local y=$2
  local region_x=$3
  local region_y=$4
  local region_width=$5
  local region_height=$6

  if [ $x -ge $region_x ] && [ $x -le $((region_x + region_width)) ] &&
     [ $y -ge $region_y ] && [ $y -le $((region_y + region_height)) ]; then
    return 0
  else
    return 1
  fi
}

# Get the ID of the first mouse device
#MOUSE_ID=$(xinput list --id-only 'USB Optical Mouse' | head -n 1)
MOUSE_ID=$(xinput --list | sed -E '/mouse/I!d;s/.*?mouse.*?id=([0-9]+).*/\1/i;q')

if [ -z "$MOUSE_ID" ]; then
  echo "No mouse device found."
  exit 1
fi

echo "Monitoring mouse device ID: $MOUSE_ID"

while true; do
  mouse_status=$(xinput test "$MOUSE_ID" | { grep -m 1 "button" && killall xinput ; })
  # Get the current mouse position
  mouse_position=$(xdotool getmouselocation --shell)
  eval "$mouse_position"
  mouse_x=$X
  mouse_y=$Y

  echo "start if"

  # Check if the mouse is within the defined region
  if is_within_region $mouse_x $mouse_y $PANEL_X $PANEL_Y $PANEL_WIDTH $PANEL_HEIGHT; then
    echo "is true"
    # Check mouse button status
    #mouse_status=$(xinput test "$MOUSE_ID" | { grep -m 1 "button" && killall xinput ; })    
    mouse_buttons=$(echo "$mouse_status" | tr -d -c 0-9)
    echo $mouse_status
    echo $mouse_buttons

    if (( $mouse_buttons == 4 )); then
      i3_switcher -p
    elif (( $mouse_buttons == 5 )); then
      i3_switcher -n
    fi
    echo "end if"

  fi

  # Sleep for a short time to reduce CPU usage
  sleep 0.1
  echo "done"
done
